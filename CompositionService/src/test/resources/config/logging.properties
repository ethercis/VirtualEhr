#-----------------------------------------------------------------------------
# Name:      logging.properties
# Project:   xmlBlaster.org
# Copyright: xmlBlaster.org, see xmlBlaster-LICENSE file
#
# Comment:   Configure java.common.logging response (since JDK 1.4)
#
# Levels:    FINEST
#            FINER
#            FINE
#            INFO
#            WARNING
#            SEVERE
#            CONFIG
#
# Force the logging property file:
#  java -Djava.common.logging.config.file=$XMLBLASTER_HOME/config/logging.properties ...
#
# Configure logging from command line:
#  -logging FINE
#  -/node/heron/logging FINE
#  -logging/org.xmlBlaster.engine FINE
#  -/node/heron/logging/org.xmlBlaster.engine FINE

# Example to dump all SOCKET messages:
#  java org.xmlBlaster.Main -logging/org.xmlBlaster.common.protocol.RequestReplyExecutor FINEST

#->Main::main()->LogManager.readConfiguration(Input)

# We provide an own formatter which logs on one line (not two as java default) and uses colors on UNIX:
#  java.common.logging.FileHandler.formatter = org.xmlBlaster.common.log.XbFormatter
# Example: Starting with ISO 8601 timestamp of local time (see XbFormat.java how to configure GMT time)
#  2007-10-23 12:43:46.258  INFO   10-main RL0 org.xmlBlaster.engine.ServerScope initThis: Setting xmlBlaster instance name
#  <date>     <time>      <level> <thread> <RL> <category>                  <codeLocation> bla bla bla

# Added colors (UNIX) can be suppressed by java -DxmlBlaster/supressXtermColors=true ...
#-----------------------------------------------------------------------------

# "handlers" specifies a comma separated list of log Handler
# classes.  These handlers will be installed during VM startup.
# Note that these classes must be on the system classpath.
# By default we only configure a ConsoleHandler, which will only
# show messages at the INFO and above levels.
handlers= java.util.logging.ConsoleHandler,java.util.logging.FileHandler, com.ethercis.servicemanager.log.SoaNotifyHandler

# To also add the FileHandler, use the following line instead.
#handlers= java.common.logging.FileHandler, java.common.logging.ConsoleHandler

# Default global logging level.
# This specifies which kinds of events are logged across
# all loggers.  For any given facility this global level
# can be overriden by a facility specific level
# Note that the ConsoleHandler also has a separate level
# setting to limit messages printed to the console.
.level = FINER 

############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.
############################################################

# Here count=1 backup files with max size 1M are created
# default file response is in user's home directory (%h).
# "%t"   the system temporary directory
# "%h"   the value of the "user.home" system property
# "%g"   the generation number to distinguish rotated logs
# "%u"   a unique number to resolve conflicts
java.util.logging.FileHandler.pattern = logs/ehrserver%u%g.log
java.util.logging.FileHandler.limit = 1000000
java.util.logging.FileHandler.count = 10
java.util.logging.FileHandler.level = FINER

#java.common.logging.FileHandler.formatter = java.common.logging.SimpleFormatter
java.util.logging.FileHandler.formatter = com.ethercis.servicemanager.log.SoaFormatter

# Limit the message that are printed on the console to INFO and above.
java.util.logging.ConsoleHandler.level = FINER
#java.common.logging.ConsoleHandler.formatter = java.common.logging.SimpleFormatter
java.util.logging.ConsoleHandler.formatter = com.ethercis.servicemanager.log.SoaFormatter


############################################################
# Facility specific properties.
# Provides extra control for each logger.
############################################################

# For example, set the com.xyz.foo logger to only log SEVERE
com.ethercis.servicemanager.cluster.RunTimeSingleton = FINER
#com.ethercis.servicemanager.cluster.RunTimeSingleton=org.xmlBlaster.common.log.XbHandler
#com.ethercis.servicemanager.cluster.useParentHandlers=false
#com.ethercis.servicemanager.cluster.config=org.xmlBlaster.common.log.XbConfig

#-----------------------------------------------------------------------------
# Trace flow of messages
# See http://www.xmlBlaster.org/xmlBlaster/doc/requirements/admin.checkpoint.html
# Checkpoints: "publish.ack", "update.queue.add", "update.ack"
# INFO dumps the most important data
# FINEST dumps the complete message
# OFF switches a checkpoint off
xmlBlaster.checkpoint=INFO
com.ethercis.calendar.level=FINER
# Dump complete incoming message
#xmlBlaster.checkpoint.publish.ack.level=FINEST
# Don't log checkpoint "update.queue.add"
#xmlBlaster.checkpoint.update.queue.add.level=OFF
# Standard logging for "update.ack"
#xmlBlaster.checkpoint.update.ack.level=INFO

# Uncomment to redirect to separate file:
#xmlBlaster.checkpoint.handlers=org.xmlBlaster.common.log.FileHandler2
#xmlBlaster.checkpoint.useParentHandlers=false
#org.xmlBlaster.common.log.FileHandler2.pattern = %h/logs/xmlBlasterCheckpoint%u%g.log
#org.xmlBlaster.common.log.FileHandler2.limit = 1000000
#org.xmlBlaster.common.log.FileHandler2.count = 10
#org.xmlBlaster.common.log.FileHandler2.formatter = org.xmlBlaster.common.log.XbFormatter
#-----------------------------------------------------------------------------

